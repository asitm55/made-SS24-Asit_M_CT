    // This Jayvee model outlines a pipeline that processes a CSV file from the web
    // and loads it into an SQLite database, applying specific data constraints as specified in the exercise slide.


pipeline TreesPipeline {
    // here is the source of data given in the excerise intruction.
    // https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv

    // 2. here I am  defining the pipeline structure by referencing the blocks used.
    TreesHttpExtractor
        -> TreesTextFileInterpreter
        -> TreesCSVInterpreter
        -> TreesColumnDeleter;

    TreesColumnDeleter
        -> TreesTableInterpreter
        -> TreesSQLiteLoader;

    // 3. After the pipeline structure, I am defining the blocks used.
    block TreesHttpExtractor oftype HttpExtractor {
        url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv";
    }

    block TreesTextFileInterpreter oftype TextFileInterpreter { }

    block TreesCSVInterpreter oftype CSVInterpreter { 
        delimiter: ";";
    }

    block TreesTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [

        //We are using the column names from the CSV file
        // to define the schema of the SQLite table.
        // The column types are inferred from the data.


            "lfd_nr" oftype integer,
            "stadtteil" oftype ValidCity,
            "standort" oftype text,
            "baumart_botanisch" oftype text,
            "baumart_deutsch" oftype text,
            "id" oftype ValidIds,
            "baumfamilie" oftype text,
        ];
    }

    // 4. We will delete the column E from the table as its not needed.
    block TreesColumnDeleter oftype ColumnDeleter {
        delete: [column E];
    }

    block TreesSQLiteLoader oftype SQLiteLoader {
        table: "trees";
        file: "./trees.sqlite";
    }

}
// 5. We define mapping condtion on the stadtteil to make sure it is legal according to the schema.
valuetype ValidCity oftype text {
    constraints: [
        OnlyCityList,
    ];
}
// 6. We define mapping condition on the coordinates to make sure it is legal according to the schema.
valuetype ValidIds oftype text {
    constraints: [
        OnlyValidIds,
    ];
}



// 7. This mapping condtion make sure that the stadtteil is one of the legal values. For e.g, Furth-Mitte, Furth-Süd, Furth-Nord.
constraint OnlyCityList on text:
    value in ["Furth-Mitte","Furth-Süd","Furth-Nord"];


// 8. This mapping condtion make sure that the coordinates are in the format of "x.x, y.y".
constraint OnlyValidIds on text:
    value matches /^\d{1,3}\.\d+, \d{1,3}\.\d+$/;




