pipeline TemperaturePipeline {
    // Define the structure of the pipeline by connecting blocks
    TemperatureExtractor
        -> TemperatureFilePicker
        -> TemperatureTextFileInterpreter
        -> TemperatureCSVInterpreter;

    TemperatureCSVInterpreter
        -> TemperatureCellWriter01
        -> TemperatureCellWriter02
        -> TemperatureTableInterpreter
        -> CelsiusToFahrenheitTransformer01
        -> CelsiusToFahrenheitTransformer02
        -> TemperaturesColumnDeleter
        -> TemperatureSQLiteLoader;

    // Block to download and unzip the data
    block TemperatureExtractor oftype GTFSExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // Block to specify the path to the extracted CSV file
    block TemperatureFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    // Block to interpret the text file with utf8 encoding
    block TemperatureTextFileInterpreter oftype TextFileInterpreter {
        encoding: "utf8";
    }

    // Block to interpret the CSV file with ; as delimiter
    block TemperatureCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }
    // There can be multiple temperature measurements per row
    block TemperaturesColumnDeleter oftype ColumnDeleter {
        // You can ignore all columns to the right of the first “​​Geraet aktiv”
        delete: [column F, column G, column H, column I];
    }

    // Block to write headers in the specified cell range
    block TemperatureCellWriter01 oftype CellWriter {
        at: range A1:E1;
        write: ['id', 'producer', 'model', 'month', 'temperature'];
    }

    // Block to write the header for battery_temperature
    block TemperatureCellWriter02 oftype CellWriter {
        at: cell J1;
        write: ['battery_temperature'];
    }

    // Block to define the transformation from Celsius to Fahrenheit
    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 1.8) + 32;
    }

    // Block to apply the transformation to the temperature column
    block CelsiusToFahrenheitTransformer01 oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }

    // Block to apply the transformation to the battery_temperature column
    block CelsiusToFahrenheitTransformer02 oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
    }

    // Block to define the schema of the SQLite table
    block TemperatureTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PositiveInteger,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    // Block to load the data into a SQLite table
    block TemperatureSQLiteLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }

    // Define the constraint for PositiveInteger type
    valuetype PositiveInteger oftype integer {
        constraints: [
            OnlyValidNumbers
        ];
    }

    // Define the constraint to ensure integers are positive
    constraint OnlyValidNumbers on integer {
        value >= 0;
    }
}
