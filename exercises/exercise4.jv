pipeline TemperaturePipeline {
    // In the "Step 1" here I am Defining the structure of the pipeline by organising the blocks for arcitecture.
    TemperatureExtractor
        -> TemperatureFilePicker
        -> TemperatureTextFileInterpreter
        -> TemperatureCSVInterpreter;

    TemperatureCSVInterpreter
        -> TemperatureCellWriter01
        -> TemperatureCellWriter02
        -> TemperatureTableInterpreter
        -> CelsiusToFahrenheitConversion01
        -> CelsiusToFahrenheitConversion02
        -> TemperatureSQLiteLoader;

    // In "Step 2" this block is used to download and unzip the data
    block TemperatureExtractor oftype GTFSExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    //In this "Step 3" this block is used to identify the path to the extracted CSV file
    block TemperatureFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    //In "Step 4" this block is used to define utf8 encoding from text file
    block TemperatureTextFileInterpreter oftype TextFileInterpreter {
        encoding: "utf8";
    }

    //In "Step 5" this block is used to define the CSV file with " ; " as delimiter
    block TemperatureCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }
    
    //In "Step 6" this block is used for writing headers in the specified cell range
    block TemperatureCellWriter01 oftype CellWriter {
        at: range A1:E1;
        write: ['id', 'producer', 'model', 'month', 'temperature'];
    }

    //In "Step 7" Block to write the header for battery_temperature
    block TemperatureCellWriter02 oftype CellWriter {
        at: cell J1;
        write: ['battery_temperature'];
    }

    //In "Step 8" this block is used to define the conversion from Celsius to Fahrenheit
    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }

    //In "Step 9" this block is used to apply the conversion to the temperature column
    block CelsiusToFahrenheitConversion01 oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }

    //In "Step 10" this block is used to apply the conversion to the battery_temperature column
    block CelsiusToFahrenheitConversion02 oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
    }

    //In "Step 11"  this block is used to define the  data structure of the SQLite table
    block TemperatureTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PositiveInteger,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    //In "Step 12" this block is used for loading the data into a SQLite table
    block TemperatureSQLiteLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}
    //In "Step 13"  this block is used ensures that the id column is a Non-Negative Integers.
    valuetype PositiveInteger oftype integer {
        constraints: [
            OnlyValidNumbers,
        ];
    }

    

    // In "Step 14" This block will take care of the constraint to ensures that the all the integers entries are Non-Negative Integers.
    constraint OnlyValidNumbers on integer:
        value >= 0;
